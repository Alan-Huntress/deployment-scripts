# Copyright (c) 2017 Huntress Labs, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Huntress Labs nor the names of its contributors
#      may be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL OPENDNS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The Huntress installer needs an Organization Key (user specified name or description) which is used to affiliate an
# Agent with a specific Organization within the Huntress Partner's Account. The Continuum SITENAME value from the
# registry is the ideal data to use for the Huntress Organization Key. Unfortunatly, the Continuum RMM does not create 
# the SITENAME value until ~30 minutes after installation which means we can't depend on it being present. As a result, 
# our initial Continuum Deployment script only used the Continuum SITEID value for the Organization Key which is unique
# and always present, but only consists of digits (not very descriptive). After discussing this with our partners, we
# developed an alternative solution that always attempts to include the Continuum SITEID and SITENAME in the Huntress
# Organization Key (looks like SITEID-SITENAME or 12345-WibbleBank). However, when the SITENAME value is not present,
# this new approach will only use the SITEID for the Organization Key. As byproduct of this compromise, now it is
# possible for a single Continuum Site to have two Huntress Organization Keys (12345 and 12345-WibbleBank). Users of
# this deployment script will have to manually consolidate these Organizations from within the Huntress Web Interface.

$AccountSecretKey = "__KEY__"

# Variables used throughout the Huntress Deployment Script for Continuum RMM.
$X64 = 64
$X86 = 32
$InstallerName = "HuntressAgent.exe"
$InstallerPath = Join-Path $Env:TMP $InstallerName
$DebugLog = Join-Path $Env:TMP HuntressDebug.log
$DownloadURL = "https://huntress.io/download/" + $AccountSecretKey + "/" + $InstallerName

function Get-TimeStamp {
    return "[{0:MM/dd/yy} {0:HH:mm:ss}]" -f (Get-Date)   
}


function Get-WindowsArchitecture {
    If ($env:ProgramW6432) {
        $WindowsArchitecture = $X64
    } Else {
        $WindowsArchitecture = $X86
    }

    return $WindowsArchitecture
}


function Get-ContinuumKeyPath {
    # Ensure we resolve the correct Continuum registry key regardless of operating system or process architecture.
    $WindowsArchitecture = Get-WindowsArchitecture

    If ($WindowsArchitecture -eq $X86) {
        $ContinuumKeyPath = "HKLM:\SOFTWARE\SAAZOD"
    } ElseIf ($WindowsArchitecture -eq $X64) {
        $ContinuumKeyPath = "HKLM:\SOFTWARE\WOW6432Node\SAAZOD"
    } Else {
        $ArchitectureError = "Failed to determine the Windows Architecture. Received $WindowsArchitecure."
        Add-Content $DebugLog "$(Get-TimeStamp) $ArchitectureError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $ArchitectureError
    }

    return $ContinuumKeyPath
}


function Get-ContinuumKeyObject {
    $ContinuumKeyPath = Get-ContinuumKeyPath

    # Ensure the Continuum registry key is present.
    If ( ! (Test-Path $ContinuumKeyPath)) {
        $ContinuumRegistryError = "The expected Continuum registry key $ContinuumKeyPath did not exist."
        Add-Content $DebugLog "$(Get-TimeStamp) $ContinuumRegistryError"
        Add-Content $DebugLog ("$(Get-TimeStamp) If you are using this script with Continuum RMM, please send " +
                                "this log to the Huntress Team for help via support@huntresslabs.com")
        throw $ContinuumRegistryError
    }
    
    $ContinuumKeyObject = Get-ItemProperty $ContinuumKeyPath
    
    # Ensure the Continuum registry key is not empty.
    If ( ! ($ContinuumKeyObject)) {
        $ContinuumRegistryError = "The Continuum registry key was empty."
        Add-Content $DebugLog "$(Get-TimeStamp) $ContinuumRegistryError"
        Add-Content $DebugLog ("$(Get-TimeStamp) If you are using this script with Continuum RMM, please send this " +
                               "log to the Huntress Team for help via support@huntresslabs.com")
        throw $ContinuumRegistryError
    }

    return $ContinuumKeyObject
}


function Get-SiteId {
    $ContinuumValueName = "SITEID"
    $ContinuumKeyObject = Get-ContinuumKeyObject

    # Ensure the SITEID value is present within the Continuum registry key.
    If ( ! (Get-Member -inputobject $ContinuumKeyObject -name $ContinuumValueName -Membertype Properties)) {
        $ContinuumKeyPath = Get-ContinuumKeyPath
        $ContinuumRegistryError = ("The expected Continuum registry value $ContinuumValueName did not exist within " +
                                   "$ContinuumKeyPath")
        Add-Content $DebugLog "$(Get-TimeStamp) $ContinuumRegistryError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $ContinuumRegistryError
    }

    $SiteId = $ContinuumKeyObject.$ContinuumValueName

    return $SiteId
}


function Get-SiteName {
    $ContinuumValueName = "SITENAME"
    $ContinuumKeyObject = Get-ContinuumKeyObject

    # Get the data from the SITENAME value within the Continuum registry key if it is present.
    If ( ! (Get-Member -inputobject $ContinuumKeyObject -name $ContinuumValueName -Membertype Properties)) {
        $SiteName = $null
    } Else {
        $SiteName = $ContinuumKeyObject.$ContinuumValueName
    }

    return $SiteName
}


function Get-Installer {
    $WebClient = New-Object System.Net.WebClient
    try {
        $WebClient.DownloadFile($DownloadURL, $InstallerPath)
    } catch {
        Add-Content $DebugLog "$(Get-TimeStamp) $_.Exception.Message"
    }
    If ( ! (Test-Path $InstallerPath)) {
        $DownloadError = "Failed to download the Huntress Installer from $DownloadURL"
        Add-Content $DebugLog "$(Get-TimeStamp) $DownloadError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Verify you correctly added your secret key to the first line of the " +
                               "Huntress Deployment Script for Continuum RMM.")
        throw $DownloadError
    }
}


function Get-OrganizationKey {
    <#
    .SYNOPSIS
    Create a Huntress Organization Key using the Continuum SITEID and SITENAME values.
    
    .DESCRIPTION
    The Huntress installer needs an Organization Key (user specified name or description) which is used to affiliate an
    Agent with a specific Organization within the Huntress Partner's Account. The Continuum SITENAME value from the
    registry is the ideal data to use for the Huntress Organization Key. Unfortunatly, the Continuum RMM does not create 
    the SITENAME value until ~30 minutes after installation which means we can't depend on it being present. As a
    result, our initial Continuum Deployment script only used the Continuum SITEID value for the Organization Key which
    is unique and always present, but only consists of digits (not very descriptive). After discussing this with our
    partners, we developed an alternative solution that always attempts to include the Continuum SITEID and SITENAME in
    the Huntress Organization Key (looks like SITEID-SITENAME or 12345-WibbleBank). However, when the SITENAME value is
    not present, this new approach will only use the SITEID for the Organization Key. As byproduct of this compromise,
    now it is possible for a single Continuum Site to have two Huntress Organization Keys (12345 and 12345-WibbleBank).
    Users of this deployment script will have to manually consolidate these Organizations from within the Huntress Web
    Interface.
    #>
    $SiteId = Get-SiteId
    $SiteName = Get-SiteName

    If ($SiteName -eq $null) {
        $OrganizationKey = $SiteId
    } Else {
        $OrganizationKey = $SiteId + "-" + $SiteName
    }

    return $OrganizationKey
}


function Install-Huntress ($OrganizationKey) {
    If ( ! (Test-Path $InstallerPath)) {
        $InstallerError = "The installer was unexpectedly removed from $InstallerPath"
        Add-Content $DebugLog "$(Get-TimeStamp) $InstallerError"
        Add-Content $DebugLog ("$(Get-TimeStamp) A security product may have quarantined the installer. Please check " +
                               "your logs. If the issue continues to occur, please send this log to the Huntress " +
                               "Team for help via support@huntresslabs.com")
        throw $InstallerError
    }
    
    Start-Process $InstallerPath "/ACCT_KEY=`"$AccountSecretKey`" /ORG_KEY=`"$OrganizationKey`" /S" -Wait
}


function Test-Installation {
    # Ensure we resolve the correct Huntress directory regardless of operating system or process architecture.
    $WindowsArchitecture = Get-WindowsArchitecture
    If ($WindowsArchitecture -eq $X86) {
        $HuntressDirPath = Join-Path $Env:ProgramFiles "Huntress"
    } ElseIf ($WindowsArchitecture -eq $X64) {
        $HuntressDirPath = Join-Path $Env:ProgramW6432 "Huntress"
    } Else {
        $ArchitectureError = "Failed to determine the Windows Architecture. Received $WindowsArchitecure."
        Add-Content $DebugLog "$(Get-TimeStamp) $ArchitectureError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $ArchitectureError
    }
    
    $HuntressAgentPath = Join-Path $HuntressDirPath "HuntressAgent.exe"
    $HuntressUpdaterPath = Join-Path $HuntressDirPath "HuntressUpdater.exe"
    $WyUpdaterPath = Join-Path $HuntressDirPath "wyUpdate.exe"
    $HuntressKeyPath = "HKLM:\SOFTWARE\Huntress Labs\Huntress"
    $AccountKeyValueName = "AccountKey"
    $OrganizationKeyValueName = "OrganizationKey"
    $TagsValueName = "Tags"

    # Ensure the Huntress installation directory was created.
    If ( ! (Test-Path $HuntressDirPath)) {
        $HuntressInstallationError = "The expected Huntress directory $HuntressDirPath did not exist."
        Add-Content $DebugLog "$(Get-TimeStamp) $HuntressInstallationError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $HuntressInstallationError
    }

    # Ensure the Huntress agent was created.
    If ( ! (Test-Path $HuntressAgentPath)) {
        $HuntressInstallationError = "The expected Huntress agent $HuntressAgentPath did not exist."
        Add-Content $DebugLog "$(Get-TimeStamp) $HuntressInstallationError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $HuntressInstallationError
    }

    # Ensure the Huntress updater was created.
    If ( ! (Test-Path $HuntressUpdaterPath)) {
        $HuntressInstallationError = "The expected Huntress updater $HuntressUpdaterPath did not exist."
        Add-Content $DebugLog "$(Get-TimeStamp) $HuntressInstallationError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $HuntressInstallationError
    }

    # Ensure our wyUpdate dependency was created.
    If ( ! (Test-Path $WyUpdaterPath)) {
        $HuntressInstallationError = "The expected wyUpdate dependency $WyUpdaterPath did not exist."
        Add-Content $DebugLog "$(Get-TimeStamp) $HuntressInstallationError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $HuntressInstallationError
    }

    # Ensure the Huntress registry key is present.
     If ( ! (Test-Path $HuntressKeyPath)) {
        $HuntressRegistryError = "The expected Huntress registry key $HuntressKeyPath did not exist."
        Add-Content $DebugLog "$(Get-TimeStamp) $HuntressRegistryError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $HuntressRegistryError
    }
    
    $HuntressKeyObject = Get-ItemProperty $HuntressKeyPath
    
    # Ensure the Huntress registry key is not empty.
    If ( ! ($HuntressKeyObject)) {
        $HuntressRegistryError = "The Huntress registry key was empty."
        Add-Content $DebugLog "$(Get-TimeStamp) $HuntressRegistryError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $HuntressRegistryError
    }

    # Ensure the AccountKey value is present within the Huntress registry key.
    If ( ! (Get-Member -inputobject $HuntressKeyObject -name $AccountKeyValueName -Membertype Properties)) {
        $HuntressRegistryError = ("The expected Huntress registry value $AccountKeyValueName did not exist " +
                                  "within $HuntressKeyPath")
        Add-Content $DebugLog "$(Get-TimeStamp) $HuntressRegistryError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $HuntressRegistryError
    }

    # Ensure the OrganizationKey value is present within the Huntress registry key.
    If ( ! (Get-Member -inputobject $HuntressKeyObject -name $OrganizationKeyValueName -Membertype Properties)) {
        $HuntressRegistryError = ("The expected Huntress registry value $OrganizationKeyValueName did not exist " +
                                  "within $HuntressKeyPath")
        Add-Content $DebugLog "$(Get-TimeStamp) $HuntressRegistryError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $HuntressRegistryError
    }

    # Ensure the Tags value is present within the Huntress registry key.
    If ( ! (Get-Member -inputobject $HuntressKeyObject -name $TagsValueName -Membertype Properties)) {
        $HuntressRegistryError = ("The expected Huntress registry value $TagsKeyValueName did not exist within " +
                                  "$HuntressKeyPath")
        Add-Content $DebugLog "$(Get-TimeStamp) $HuntressRegistryError"
        Add-Content $DebugLog ("$(Get-TimeStamp) Please send this log to the Huntress Team for help via " +
                               "support@huntresslabs.com")
        throw $HuntressRegistryError
    }
}


function main {
    # TODO - Log debug information (OS, Arch, Language, etc)
    Get-Installer
    $OrganizationKey = Get-OrganizationKey
    Install-Huntress $OrganizationKey
    Test-Installation
}

main
